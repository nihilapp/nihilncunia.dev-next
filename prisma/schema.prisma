// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/_prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 권한
enum UserRole {
  VISITOR // 방문자 (게스트북 작성 가능)
  USER // 구독자 (댓글 작성 가능, 새 글 알림)
  ADMIN // 관리자 (모든 권한)
}

// 게시물 상태
enum PostStatus {
  DRAFT // 임시 저장
  PUBLISHED // 공개
  ARCHIVED // 삭제
}

// 댓글 상태
enum CommentStatus {
  PENDING // 승인 대기
  APPROVED // 승인됨
  REJECTED // 거부됨
}

// 댓글 작성자 타입
enum CommentAuthorType {
  USER // 구독자 (가입된 사용자)
  ADMIN // 관리자
}

// 이메일 인증 상태
enum VerificationStatus {
  PENDING // 대기
  VERIFIED // 인증됨
  EXPIRED // 만료됨
  FAILED // 실패
}

// 게스트북 상태
enum GuestBookStatus {
  PENDING // 승인 대기
  APPROVED // 승인됨
  REJECTED // 거부됨
}

// 활동 유형
enum ActivityType {
  COMMENT // 댓글 작성
  LOGIN // 로그인
  PROFILE_UPDATE // 프로필 수정
  GUESTBOOK_WRITE // 게스트북 작성
  POST_VIEW // 포스트 조회
  EMAIL_NOTIFICATION_READ // 이메일 알림 읽음
  GUESTBOOK_REPLY // 게스트북 답글
  PASSWORD_CHANGE // 비밀번호 변경
  ACCOUNT_DEACTIVATE // 계정 비활성화
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  username      String   @unique
  password_hash String
  image         String?
  bio           String?
  role          UserRole @default(USER) // 기본값을 USER로 변경

  refresh_token String?

  // 블로그 관리자용 설정
  github_url    String?
  instagram_url String?
  discord_url   String?
  website_url   String?

  // 마지막 로그인 추적
  last_login_at DateTime?

  // 계정 상태
  is_active Boolean @default(true)

  // 구독자 정보
  subscription_date DateTime  @default(now()) // 구독 시작일
  comment_count     Int       @default(0) // 댓글 작성 수
  last_comment_at   DateTime? // 마지막 댓글 작성일

  // 새 글 알림 설정
  email_notifications Boolean @default(true) // 이메일 알림 수신 여부

  // 관계
  comments            Comment[]
  posts               Post[]
  activities          GuestActivity[] // 구독자 활동 이력
  guestBooks          GuestBook[] // 게스트북 작성 (USER/VISITOR)
  guestBookReplies    GuestBookReply[] // 게스트북 답글 (ADMIN)
  passwordResetTokens PasswordResetToken[] // 비밀번호 재설정 토큰

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([email, username])
  @@index([subscription_date])
  @@index([comment_count])
  @@map("users")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // 관계
  posts Post[]

  @@index([name])
  @@map("categories")
}

model Tag {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // 관계
  posts PostTags[]

  @@index([name])
  @@map("tags")
}

model Series {
  id          String  @id @default(uuid())
  title       String
  description String?
  slug        String  @unique
  cover_image String?

  // 소프트 삭제
  deleted_at DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // 관계
  posts Post[]

  @@index([title, slug])
  @@index([deleted_at])
  @@map("series")
}

model Post {
  id      String     @id @default(uuid())
  title   String
  content String // 마크다운 콘텐츠
  excerpt String? // 요약 (SEO용)
  slug    String     @unique // URL 슬러그
  status  PostStatus @default(DRAFT)

  // SEO 및 메타데이터
  meta_title       String?
  meta_description String?
  keywords         String?

  // 게시 정보
  published_at   DateTime?
  featured_image String?

  // 통계
  view_count Int @default(0)
  like_count Int @default(0)

  // 소프트 삭제
  deleted_at DateTime?

  // 관계
  author_id   String
  author      User       @relation(fields: [author_id], references: [id], onDelete: Cascade)
  category_id String?
  category    Category?  @relation(fields: [category_id], references: [id], onDelete: SetNull)
  series_id   String?
  series      Series?    @relation(fields: [series_id], references: [id], onDelete: SetNull)
  tags        PostTags[]
  comments    Comment[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([title, slug])
  @@index([status, published_at])
  @@index([category_id])
  @@index([author_id])
  @@index([series_id])
  @@index([deleted_at])
  @@map("posts")
}

// Post와 Tag 간의 다대다 관계를 위한 중간 테이블
model PostTags {
  id         String   @id @default(uuid())
  post_id    String
  tag_id     String
  created_at DateTime @default(now())

  // 관계
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@unique([post_id, tag_id])
  @@index([post_id])
  @@index([tag_id])
  @@map("post_tags")
}

model Comment {
  id      String @id @default(uuid())
  content String // 댓글 내용

  // 작성자 정보 (USER/ADMIN만 댓글 작성 가능)
  author_type CommentAuthorType

  // 구독자 댓글인 경우 User와 연결 (필수)
  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // 댓글 계층 구조 (답글 기능)
  parent_id String? // 부모 댓글 ID
  parent    Comment?  @relation("CommentReplies", fields: [parent_id], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")

  // 포스트 연결
  post_id String
  post    Post   @relation(fields: [post_id], references: [id], onDelete: Cascade)

  // 상태 관리
  status     CommentStatus @default(PENDING) // 댓글 상태
  deleted_at DateTime? // 소프트 삭제

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([post_id])
  @@index([parent_id])
  @@index([author_type])
  @@index([status])
  @@index([deleted_at])
  @@map("comments")
}

// 관리자 이메일 인증 이력
model AdminVerifyHistory {
  id          String             @id @default(uuid())
  email       String
  code_hash   String?
  expires_at  DateTime
  verified_at DateTime?
  status      VerificationStatus @default(PENDING)
  created_at  DateTime           @default(now())

  @@map("admin_verify_histories")
}

// 구독자 통계 및 활동 이력
model GuestActivity {
  id      String @id @default(uuid())
  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // 활동 유형
  activity_type ActivityType // enum으로 변경

  // 활동 상세 정보
  activity_data Json? // 활동별 추가 데이터

  // 활동 시간
  created_at DateTime @default(now())

  @@index([user_id])
  @@index([activity_type])
  @@index([created_at])
  @@map("guest_activities")
}

// 게스트북
model GuestBook {
  id String @id @default(uuid())

  // 작성자 정보 (비지터)
  author_name   String // 보일 이름
  author_email  String // 답글 알림용 이메일
  password_hash String // 수정용 비밀번호

  // 게스트북 내용
  content String // 게스트북 내용
  status  GuestBookStatus @default(PENDING) // 승인 상태

  // 관계 (USER/VISITOR가 작성한 게스트북)
  user_id String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: SetNull)

  // 답글 관계
  replies GuestBookReply[]

  // 관리용
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([author_email])
  @@index([status])
  @@index([user_id])
  @@map("guest_books")
}

// 게스트북 답글
model GuestBookReply {
  id String @id @default(uuid())

  // 답글 내용
  content String

  // 답글 작성자 (관리자만 답글 가능)
  admin_id String
  admin    User   @relation(fields: [admin_id], references: [id], onDelete: Cascade)

  // 게스트북 연결
  guest_book_id String
  guest_book    GuestBook @relation(fields: [guest_book_id], references: [id], onDelete: Cascade)

  // 답글 상태
  is_public Boolean @default(true) // 공개 여부

  // 관리용
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([guest_book_id])
  @@index([admin_id])
  @@index([is_public])
  @@map("guest_book_replies")
}

// 비밀번호 재설정 토큰
model PasswordResetToken {
  id         String   @id @default(uuid())
  user_id    String
  token_hash String // 해시된 토큰
  expires_at DateTime
  used       Boolean  @default(false)
  created_at DateTime @default(now())

  // 관계
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([expires_at])
  @@index([used])
  @@map("password_reset_tokens")
}

// 관리자 인증 코드
model AdminVerificationCode {
  id         String   @id @default(uuid())
  code_hash  String // 해시된 인증 코드
  expires_at DateTime
  used       Boolean  @default(false)
  created_at DateTime @default(now())
  ip_address String? // 요청한 IP 주소 (보안상 추적용)

  @@index([expires_at])
  @@index([used])
  @@index([created_at])
  @@map("admin_verification_codes")
}
