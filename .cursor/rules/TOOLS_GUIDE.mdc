---
description:
globs:
alwaysApply: true
---
# AI용 Tools 상세 가이드 (클래스/메소드별)

이 문서는 AI가 `@/tools` 및 `@/api/_libs/tools` 폴더의 각 클래스/함수/메소드의 역할과 사용법을 정확히 파악할 수 있도록 상세하게 기술합니다.

---

## 1. `/app/_libs/tools` (`@/tools`)

### 1.1. `Common` 클래스
- **범용 데이터 변환, 배열 처리, undefined/null 제거 등 공통 유틸리티 제공**

#### 메소드 목록
- `uuid(key?: string): string`
  - (선택) key를 접두사로 붙인 uuid를 생성
- `string<T>(data: T): string`
  - 데이터를 JSON 문자열로 변환
- `parse<T>(stringData: string): T`
  - JSON 문자열을 객체로 파싱
- `undefinedRemover<T>(data: T): T`
  - 객체의 undefined/null 값을 빈 문자열로 치환
- `arraySlice<T>(array: T[], number: number): T[][]`
  - 배열을 지정한 크기만큼 2차원 배열로 분할

---

### 1.2. `Calendar` 클래스
- **날짜/달력/시간 관련 유틸리티 제공 (dayjs 기반)**

#### 메소드 목록
- `date(date?: string | number | Date): dayjs.Dayjs`
  - 입력값을 dayjs 객체(Asia/Seoul 타임존)로 변환
- `getDateInfo(date?): DateInfo`
  - 연/월/일/요일/시/분 등 날짜 정보 객체 반환
- `getNowDate(): string`
  - 오늘 날짜(YYYY-MM-DD) 반환
- `monthData(date?): MonthData`
  - 해당 월의 정보(이전/다음/현재 월 등) 반환
- `monthArray(date?): CalendarMonthData[][]`
  - 달력 형태의 2차원 배열(6주 x 7일) 반환, 각 날짜의 활성화 여부 포함
- `timeData(): CalendarTime`
  - 0~23시, 0~60분의 label/value 배열 반환
- `dateToFormat(date?, format?): string`
  - 날짜를 지정 포맷 문자열로 변환(기본: 'YYYY년 MM월 DD일')
- `dateToTimeFormat(date?, format?): string`
  - 날짜+시간을 지정 포맷 문자열로 변환(기본: 'YYYY년 MM월 DD일 HH:mm')
- `UTCString(date?): string`
  - 입력 날짜를 UTC 문자열로 변환

---

### 1.3. `tools` 객체
- `common: Common`, `calendar: Calendar` 인스턴스를 포함
- `import { tools } from '@/tools';`로 사용

---

## 2. `/app/api/_libs/tools` (`@/api/_libs/tools`)

### 2.1. `Jwt` 클래스
- **JWT 토큰 생성, 검증, 만료 체크 등 인증 관련 유틸리티**

#### 메소드 목록
- `setSecret(secret: string): Promise<Uint8Array>`
  - 비밀키를 TextEncoder로 인코딩
- `genTokens(user: User): Promise<Tokens>`
  - User 객체로 access/refresh 토큰 및 만료시간 생성
- `tokenInfo(mode: TokenMode, token: string): Promise<TokenInfo>`
  - 토큰 문자열을 파싱하여 payload 반환, 유효성 검증
- `expCheck(expTime: number): number`
  - 만료시간(exp)까지 남은 초 반환 (음수면 만료)

---

### 2.2. `Cookie` 클래스
- **서버사이드 쿠키 get/set/remove 등 조작 유틸리티**

#### 메소드 목록
- `static store(): Promise<ReturnType<typeof cookies>>`
  - next/headers의 cookies 객체 반환
- `set(name: string, value: string, expiresAt: number): Promise<void>`
  - 쿠키명, 값, 만료(초)로 쿠키 저장 (httpOnly, secure, sameSite, path 등 옵션 적용)
- `get<T>(name: string): Promise<T | null>`
  - 쿠키명으로 값을 가져와 파싱하여 반환, 없으면 null
- `remove(name: string): Promise<void>`
  - 쿠키 삭제 (maxAge: 0)

---

### 2.3. `Bcrypt` 클래스
- **비밀번호 해시/검증 유틸리티**

#### 메소드 목록
- `dataToHash(data: string): Promise<string>`
  - 평문 비밀번호를 bcrypt 해시로 변환
- `dataCompare(hashedData: string, data: string): Promise<boolean>`
  - 해시와 평문을 비교하여 일치 여부 반환

---

### 2.4. `serverTools` 객체
- `common`, `calendar`, `bcrypt`, `jwt`, `cookie` 인스턴스를 포함
- `import { serverTools } from '@/api/_libs/tools';`로 사용

---

## 3. 사용 예시

```ts
import { tools } from '@/tools';
const uuid = tools.common.uuid();
const calendarArr = tools.calendar.monthArray();

import { serverTools } from '@/api/_libs/tools';
const tokenInfo = await serverTools.jwt.tokenInfo('accessToken', token);
const isValid = await serverTools.bcrypt.dataCompare(hash, pw);
```

---

## 4. 기타
- 각 클래스/메소드의 파라미터, 반환값, 예외 상황을 참고하여 AI가 자동화/리팩토링/문서화에 활용할 수 있음.
- 새로운 메소드 추가 시, 이 가이드에 반드시 시그니처/설명 추가할 것.



