---
description:
globs:
alwaysApply: true
---
# API 및 백엔드 개발 규칙

---

## API 작성 및 인증 규칙

- 모든 API는 '/app/api' 폴더 안에 작성합니다.
- GET을 제외한 모든 요청에는 JWT 인증이 필요합니다.

## API Import 구조

- 반드시 'NextRequest', 'NextResponse'를 'next/server'에서 import 합니다.
- 'DB'는 '@/api/_libs'에서 import 합니다.
- 'getHeaderToken', 'refreshCheck', 'serverTools'는 '@/api/_libs'에서 import 합니다.
- 'ApiResponse', 'ApiError' 타입은 '@/_entities/common'에서 import 합니다.
- 엔티티별 타입들은 '@/_entities/[entity명]'에서 import 합니다.

## JWT 인증 처리

- 'getHeaderToken(request)' 함수로 액세스 토큰을 추출합니다.
- 토큰이 없으면 401 상태코드로 에러 응답을 반환합니다.
- 'refreshCheck(userId, accessToken)' 함수로 토큰 검증 및 갱신을 수행합니다.
- refreshCheck 결과에서 error가 true이면 해당 status와 message로 에러 응답을 반환합니다.

## API 응답 형식

- 성공 응답은 'ApiResponse<T>' 타입을 사용합니다.
- 에러 응답은 'ApiError' 타입을 사용합니다.
- 모든 응답은 'NextResponse.json(응답객체, { status: 상태코드 })' 형식으로 반환합니다.
- 성공 응답 구조: '{ response: T, message: string }'
- 에러 응답 구조: '{ response: null, message: string }'

## 에러 처리

- 모든 API는 try-catch로 감싸야 합니다.
- 요청 데이터 파싱 에러는 400 상태코드로 처리합니다.
- 인증 관련 에러는 401 상태코드로 처리합니다.
- 데이터 없음은 404 상태코드로 처리합니다.
- 중복 데이터는 409 상태코드로 처리합니다.
- 서버 에러는 500 상태코드로 처리합니다.

## DB 함수 호출 및 변수명 규칙

- DB 함수는 'DB.modelName()' 형식으로 호출합니다. (예: DB.user(), DB.posts())
- 조회시 필요한 필드만 'select'를 사용하여 선택합니다.
- 'find'로 시작하는 변수명을 사용하여 데이터 존재 여부를 확인합니다.
- 요청 데이터를 받는 변수는 의미있는 이름을 사용합니다. (예: userData, updateData, passwordData)
- 조회된 데이터는 'find'로 시작합니다. (예: findUser, findPost)
- 생성/수정된 데이터는 'new', 'updated'를 접두사로 사용합니다.

## Params 처리

- 동적 라우트의 params는 'Promise' 타입입니다.
- 'interface Params { params: Promise<{id: string}> }' 형식으로 정의합니다.
- 'const { id } = await params;' 형식으로 비동기 처리합니다.

## 보안 규칙

- 비밀번호는 'serverTools.bcrypt!.dataToHash()' 함수로 해싱합니다.
- 비밀번호 검증은 'serverTools.bcrypt!.dataCompare()' 함수를 사용합니다.
- 사용자 권한 확인을 통해 본인의 데이터만 수정/삭제 가능하도록 합니다.
- 민감한 정보는 응답에서 제외합니다. (비밀번호, 토큰 등)

## Prisma 사용시

- 'model' 은 대문자로 시작합니다.
- 각 모델은 '@@map'을 해서 소문자, 스네이크 케이스로 매핑합니다.
- 각 모델은 'uuid'를 아이디로 사용합니다. 또한 자동으로 생성되게 합니다.
- 관계 설정시에는 'delete' 를 'cascade' 로 설정합니다.
- 각 모델의 각 컬럼의 이름은 스네이크 케이스로 작성합니다.

---

> 이 규칙은 Next.js API, 데이터베이스, 인증, 보안 등 백엔드 개발의 일관성과 안전성을 보장하기 위한 가이드입니다.

