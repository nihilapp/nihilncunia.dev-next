---
alwaysApply: true
---

# React Query 훅 작성 규칙

---

## API 함수 작성 규칙

- queryFn과 mutationFn은 언제나 별도로 작성합니다.
- 각 엔티티 폴더의 `[entity명].api.ts` 파일에 작성합니다.
- 클래스 형태가 아닌 개별 함수 형태로 작성합니다.
- API 함수는 `@/_entities/[entity명]/[entity명].api.ts`에서 import합니다.

### API 함수 작성 예시

```typescript
// profiles.api.ts
export async function getProfiles(params?: PaginationParams) {
  return Api.getQuery<Profile[]>(`/profiles${query}`);
}

export async function updateProfile(id: string, data: UpdateProfile) {
  return Api.patchQuery<Profile, UpdateProfile>(`/profiles/${id}`, data);
}
```

## GET 요청

- 훅 함수명은 'useGet'으로 시작한다.
- useQuery에서 UseQueryOptions 타입을 import하고 options 매개변수를 제공한다.
- useLoading, useDone을 '@/\_entities/common'에서 import하여 사용한다.
- useQuery에서 data, isLoading, isFetching, isSuccess를 구조분해, 나머지는 ...other로 처리한다.
- loading, done 상태를 각각 useLoading, useDone으로 관리한다.
- 리턴 객체는 반드시 { 데이터명, loading, done, ...other } 구조를 따른다.
- 데이터명은 의미있는 이름으로 설정한다.
- 매개변수가 있는 경우 enabled: !!매개변수로 조건부 실행한다.
- 훅에서 개별적으로 staleTime, gcTime 등 캐싱 설정을 하지 않는다.

### GET 훅 옵션 처리

- 모든 GET 훅은 매개변수로 옵션 객체를 받을 수 있어야 한다.
- 옵션 인터페이스는 `QueryOptionType<응답타입>` 형태로 정의한다.
- 옵션 객체는 선택적(optional)이며 기본값을 제공하지 않는다.
- useQuery 호출 시 `...options`로 옵션을 전달한다.

### GET 훅 구현 예시

```typescript
import { useQuery } from "@tanstack/react-query";

import { getProfiles } from "@/_entities/profiles/profiles.api";
import { profilesKeys } from "@/_entities/profiles/profiles.keys";
import type { Profile } from "@/_entities/profiles/profiles.types";
import { useDone, useLoading, type QueryOptionType } from "@/_entities/common";

export function useGetProfiles(options?: QueryOptionType<Profile[]>) {
  const {
    data: profiles,
    isLoading,
    isFetching,
    isSuccess,
    ...other
  } = useQuery({
    queryKey: profilesKeys.all(),
    queryFn: getProfiles,
    select: (res) => res.data,
    ...options,
  });

  const loading = useLoading(isLoading, isFetching);
  const done = useDone(loading, isSuccess);

  return {
    profiles,
    loading,
    done,
    ...other,
  };
}
```

---

## MUTATION (CREATE/UPDATE/DELETE)

- 훅 함수명은 useCreate, useUpdate, useDelete로 시작한다.
- useMutation, useQueryClient를 import한다.
- 매개변수로 옵션 객체를 받고 useMutation 객체를 직접 리턴한다.
- queryClient로 관련 쿼리 invalidate 처리한다.
- onSuccess에서 관련 쿼리 키를 invalidate한다.
- CREATE: 리스트 쿼리만 invalidate, UPDATE: 리스트+상세 invalidate, DELETE: 리스트 invalidate.
- mutationFn에서 복합 객체 매개변수는 인터페이스 또는 인라인 타입 사용.
- UPDATE는 { id: string; data: UpdateType } 형태 매개변수 사용.

### MUTATION 훅 옵션 처리

- 모든 MUTATION 훅은 매개변수로 옵션 객체를 받을 수 있어야 한다.
- 옵션 인터페이스는 `MutationOptionsType<응답타입, 변수타입>` 형태로 정의한다.
- 옵션 객체는 기본값 `{}`를 가진다.
- useMutation 호출 시 `...options`로 옵션을 전달한다.
- 기본 onSuccess 로직과 사용자 정의 옵션을 병합할 수 있도록 설계한다.

### MUTATION 훅 구현 예시

```typescript
import { useMutation, useQueryClient } from "@tanstack/react-query";

import { updateProfile } from "@/_entities/profiles/profiles.api";
import { profilesKeys } from "@/_entities/profiles/profiles.keys";
import type {
  Profile,
  UpdateProfile,
} from "@/_entities/profiles/profiles.types";
import type { MutationOptionsType } from "@/_entities/common/common.types";

interface UseUpdateProfileOptions
  extends MutationOptionsType<Profile, { id: string; data: UpdateProfile }> {}

export function useUpdateProfile(options: UseUpdateProfileOptions = {}) {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({ id, data }: { id: string; data: UpdateProfile }) => {
      const response = await updateProfile(id, data);
      return response.data;
    },
    onSuccess: (data, variables) => {
      // 프로필 업데이트 성공 시 관련 쿼리 무효화
      queryClient.invalidateQueries({
        queryKey: profilesKeys.all(),
      });
      queryClient.invalidateQueries({
        queryKey: profilesKeys.detail(variables.id),
      });
    },
    ...options,
  });
}
```

---

## 공통 옵션 규칙

- 모든 훅은 옵션 객체를 통해 React Query의 모든 설정을 커스터마이징할 수 있어야 한다.
- 옵션 인터페이스는 `mutationFn` 또는 `queryKey`, `queryFn`을 제외한 모든 옵션을 포함한다.
- 에러 타입은 `AxiosError<ErrorPayload>`로 통일한다.
- 옵션 객체는 선택적(optional)이며 기본값을 제공한다.

---

## 쿼리 키 관리

- 모든 쿼리 키는 중앙화된 keys 파일에서 관리한다.
- keys 파일은 `[entity명].keys.ts` 형태로 작성한다.
- 쿼리 키 함수는 의미있는 이름으로 정의한다.

### 쿼리 키 예시

```typescript
export const profilesKeys = {
  all: () => ["profiles"] as const,
  lists: () => [...profilesKeys.all(), "list"] as const,
  list: (filters: string) => [...profilesKeys.lists(), { filters }] as const,
  details: () => [...profilesKeys.all(), "detail"] as const,
  detail: (id: string) => [...profilesKeys.details(), id] as const,
};
```

---

> 이 규칙은 React Query 기반 데이터 패칭 및 뮤테이션의 일관성과 유지보수성을 높이기 위한 가이드입니다.
