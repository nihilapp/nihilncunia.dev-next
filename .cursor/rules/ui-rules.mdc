---
alwaysApply: true
---

# UI 컴포넌트 작성 규칙

---

## 컴포넌트 작성 규칙

- 컴포넌트 디자인 시 'shadcn' 컴포넌트를 사용한다. 해당 컴포넌트들은 '/app/(common)/\_components/ui'에 위치한다.
- page.tsx에서는 반드시 export default를 사용한다.
- 임포트 시 '@'는 'app' 폴더를 의미한다.
- 로직 작성 시 가독성을 위해 공백 라인을 적극적으로 활용한다.
- 공통 컴포넌트는 '/app/(common)/\_components'에 생성하고, index.ts에 export 한다.
- shadcn이 아닌 직접 작성 컴포넌트는 반드시 'class-variance-authority'를 사용한다.
- 데이터 존재 여부 확인 변수는 'find'로 시작해야 한다.
- page.tsx에는 'use client'를 사용하지 않는다(서버 컴포넌트 유지).
- page.tsx에는 반드시 metadata를 작성한다. (setMeta 함수는 'app/\_libs'에 위치) title, url 을 필수로 기재한다.
- 동적 페이지의 metadata는 generateMetadata 함수를 사용한다.
- page.tsx에서 파라미터는 'params' 변수명으로 받고, Promise 타입을 사용한다.
- 페이지 컴포넌트는 별도 파일로 만들고, cva 구조를 유지한다.
- 폼 관련 함수명은 onClick, onChange 등 수식어를 붙인다.
- 직접 작성한 아이콘은 '/app/\_icons'에 위치한다.

## 페이지-컴포넌트 구조

- page.tsx는 서버 컴포넌트로 유지하고, 실제 렌더링은 별도 컴포넌트에서 처리한다.
- 렌더링 컴포넌트는 `_components` 폴더에 위치하고, index.ts에서 export한다.
- 렌더링 컴포넌트는 Props 인터페이스를 정의하고, className과 기타 HTML 속성을 받을 수 있도록 한다.
  - 이 때 className은 기존의 className이 아니기 때문에 반드시 Props 인터페이스 안에서 명시해야한다.

### 페이지-컴포넌트 예시

```typescript
// page.tsx (서버 컴포넌트)
import { SignInForm } from "./_components";
import { setMeta } from "@/_libs";

export const metadata = setMeta({
  title: "로그인",
  url: "/auth/signin",
});

export default function SignInPage() {
  return <SignInForm />;
}

// _components/SignInForm.tsx (클라이언트 컴포넌트)
("use client");

interface Props extends React.FormHTMLAttributes<HTMLFormElement> {
  className?: string;
}

export function SignInForm({ className, ...props }: Props) {
  // 로직 구현
}
```

## 스타일링 규칙

- 스타일링은 TailwindCSS, Styled Components, shadcn/ui, class-variance-authority를 조합해 사용한다.
- 반응형 디자인을 기본으로 고려한다.
- SSR/CSR 구분에 유의하며, 서버 컴포넌트와 클라이언트 컴포넌트 역할을 명확히 한다.

---

> 이 규칙은 UI 컴포넌트 작성의 일관성과 생산성, 유지보수성을 높이기 위한 가이드입니다.
