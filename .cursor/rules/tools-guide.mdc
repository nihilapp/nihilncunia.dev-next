# Tools 헬퍼 가이드

---

## 개요

`@/tools` 폴더에는 프로젝트에서 사용하는 공통 유틸리티 헬퍼들이 위치합니다. 각 헬퍼는 독립적으로 import하여 사용합니다.

## 파일 구조

```
app/_libs/tools/
├── index.ts          # 모든 헬퍼 export
├── axios.tools.ts    # HTTP 요청 처리
├── bcrypt.tools.ts   # 비밀번호 해싱
├── common.tools.ts   # 공통 유틸리티
├── cookie.tools.ts   # 쿠키 처리
├── date.tools.ts     # 날짜/시간 처리
├── jwt.tools.ts      # JWT 토큰 처리
├── logger.tools.ts   # 로깅
└── prisma.tools.ts   # Prisma 데이터베이스 처리
```

## 각 헬퍼 설명

### Api (`@/tools/axios.tools`)

**위치**: `app/_libs/tools/axios.tools.ts`

**주요 기능**:

- HTTP API 요청 처리 (GET, POST, PATCH, PUT, DELETE)
- 파일 업로드 지원
- 자동 에러 처리 및 응답 타입 지정

**사용 목적**:

- API 라우트와의 통신
- React Query의 queryFn/mutationFn에서 사용
- 파일 업로드/다운로드

**주요 메서드**:

- `Api.getQuery<T>()` - GET 요청
- `Api.postQuery<T, P>()` - POST 요청
- `Api.patchQuery<T, P>()` - PATCH 요청
- `Api.postWithFile<T, P>()` - 파일 업로드

### BcryptHelper (`@/tools/bcrypt.tools`)

**위치**: `app/_libs/tools/bcrypt.tools.ts`

**주요 기능**:

- 비밀번호 해싱 및 검증
- bcryptjs 기반 암호화

**사용 목적**:

- 사용자 비밀번호 암호화
- 로그인 시 비밀번호 검증

**주요 메서드**:

- `BcryptHelper.dataToHash(data)` - 평문을 해시로 변환
- `BcryptHelper.dataCompare(hashedData, data)` - 해시와 평문 비교

### CommonHelper (`@/tools/common.tools`)

**위치**: `app/_libs/tools/common.tools.ts`

**주요 기능**:

- UUID/CUID 생성
- 배열 처리 (분할, 섞기, 중복 제거 등)
- 객체 처리 (깊은 복사, 속성 선택/제외)
- 문자열 변환 (케이스 변환, 자르기, 패딩 등)
- 데이터 변환 (JSON 파싱, null/undefined 처리)

**사용 목적**:

- 데이터 전처리 및 후처리
- 유틸리티 함수 제공
- 코드 재사용성 향상

**주요 메서드**:

- `CommonHelper.uuid()` - UUID 생성
- `CommonHelper.arraySlice()` - 배열 분할
- `CommonHelper.deepClone()` - 깊은 복사
- `CommonHelper.camelCase()` - 케이스 변환

### CookieHelper (`@/tools/cookie.tools`)

**위치**: `app/_libs/tools/cookie.tools.ts`

**주요 기능**:

- 서버사이드 쿠키 관리
- 쿠키 설정/조회/삭제
- 만료 시간 문자열 파싱

**사용 목적**:

- 세션 관리
- 사용자 인증 토큰 저장
- 설정 정보 저장

**주요 메서드**:

- `CookieHelper.set()` - 쿠키 설정
- `CookieHelper.get()` - 쿠키 조회
- `CookieHelper.remove()` - 쿠키 삭제
- `CookieHelper.parseExpireString()` - 만료 시간 파싱

### DateHelper (`@/tools/date.tools`)

**위치**: `app/_libs/tools/date.tools.ts`

**주요 기능**:

- 날짜/시간 처리 (Luxon 기반)
- 한국 시간대 (Asia/Seoul) 지원
- 날짜 포맷팅 및 계산
- 상대적 시간 표시

**사용 목적**:

- 날짜 표시 및 계산
- 시간대 처리
- 사용자 친화적 시간 표시

**주요 메서드**:

- `DateHelper.now()` - 현재 시간
- `DateHelper.format()` - 날짜 포맷팅
- `DateHelper.add()` - 날짜 더하기
- `DateHelper.toRelative()` - 상대적 시간

### JwtHelper (`@/tools/jwt.tools`)

**위치**: `app/_libs/tools/jwt.tools.ts`

**주요 기능**:

- JWT 토큰 생성 및 검증
- 액세스 토큰, 리프레시 토큰 관리
- 토큰 만료 시간 분석
- 사용자 정보 추출 및 검증

**사용 목적**:

- 사용자 인증 및 권한 관리
- 토큰 기반 세션 관리
- 보안 토큰 검증

**주요 메서드**:

- `JwtHelper.genTokens(payload)` - 액세스/리프레시 토큰 생성
- `JwtHelper.verifyWithUser(token, type)` - 사용자 정보와 함께 토큰 검증
- `JwtHelper.verify(token, type)` - 기본 JWT 토큰 검증
- `JwtHelper.refreshTokens(accessToken, refreshToken)` - 토큰 새로고침
- `JwtHelper.extractUserInfo(token, type)` - 토큰에서 사용자 정보 추출

### Logger (`@/tools/logger.tools`)

**위치**: `app/_libs/tools/logger.tools.ts`

**주요 기능**:

- 구조화된 로깅
- 카테고리별 로그 관리
- 개발/프로덕션 환경 구분

**사용 목적**:

- 애플리케이션 모니터링
- 디버깅 및 에러 추적
- 사용자 행동 분석

**주요 메서드**:

- `Logger.apiRequest()` - API 요청 로그
- `Logger.auth()` - 인증 로그
- `Logger.error()` - 에러 로그
- `Logger.userAction()` - 사용자 행동 로그

### PrismaHelper (`@/tools/prisma.tools`)

**위치**: `app/_libs/tools/prisma.tools.ts`

**주요 기능**:

- Prisma 클라이언트 관리
- 데이터베이스 연결 및 쿼리 실행
- 사용자 데이터 CRUD 작업
- 트랜잭션 처리

**사용 목적**:

- 데이터베이스 작업 추상화
- 사용자 데이터 관리
- 데이터베이스 성능 최적화

**주요 메서드**:

- `PrismaHelper.user.getUser(id)` - 사용자 조회
- `PrismaHelper.user.updateLastLogin(id)` - 마지막 로그인 시간 업데이트
- `PrismaHelper.user.createUser(data)` - 사용자 생성
- `PrismaHelper.user.updateUser(id, data)` - 사용자 정보 수정

## Import 방법

각 헬퍼는 개별적으로 import하여 사용합니다:

```typescript
import { Api } from "@/tools/axios.tools";
import { BcryptHelper } from "@/tools/bcrypt.tools";
import { CommonHelper } from "@/tools/common.tools";
import { CookieHelper } from "@/tools/cookie.tools";
import { DateHelper } from "@/tools/date.tools";
import { JwtHelper } from "@/tools/jwt.tools";
import { Logger } from "@/tools/logger.tools";
import { PrismaHelper } from "@/tools/prisma.tools";
```

## 사용 예시

```typescript
// API 요청
const response = await Api.getQuery<User[]>("/users");

// 비밀번호 해싱
const hashedPassword = await BcryptHelper.dataToHash("password123");

// UUID 생성
const userId = CommonHelper.uuid("user");

// 쿠키 설정
await CookieHelper.set("session", token, "7d");

// 날짜 포맷팅
const formattedDate = DateHelper.format(new Date(), "yyyy년 MM월 dd일");

// JWT 토큰 생성
const tokens = await JwtHelper.genTokens({
  id: userId,
  email: "user@example.com",
  role: "user",
});

// 토큰 검증
const validation = await JwtHelper.verifyWithUser(token, "access");

// 로그 기록
Logger.apiRequest("GET", "/api/users", { userId });

// 사용자 데이터 조회
const user = await PrismaHelper.user.getUser(userId);
```

---

> 이 가이드는 프로젝트에서 사용하는 공통 유틸리티 헬퍼들의 위치와 사용법을 안내합니다.
